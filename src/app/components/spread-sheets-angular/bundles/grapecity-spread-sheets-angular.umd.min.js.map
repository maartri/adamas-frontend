{"version":3,"sources":["../../src/column.component.ts","../../src/worksheet.component.ts","../../src/spreadSheets.component.ts","../../src/spreadSheets.module.ts"],"names":["ColumnComponent","this","changes","prototype","onAttached","sheet","index","onColumnChanged","suspendPaint","suspendEvent","changeName","newValue","currentValue","parseInt","setColumnWidth","setColumnVisible","setColumnResizable","autoFitColumn","setStyle","GC.Spread","Sheets","SheetArea","colHeader","setCellType","setFormatter","viewport","resumeEvent","resumePaint","ngOnChanges","changesCache","Component","args","selector","template","Input","WorksheetComponent","Worksheet","_this","columns","dataSource","setDataSource","forEach","columnComponent","dataField","bindColumn","name","displayName","headerText","length","setColumnCount","getSheet","setRowCount","frozenColumnCount","frozenRowCount","frozenTrailingRowCount","frozenTrailingColumnCount","selectionPolicy","selectionUnit","zoom","currentTheme","setDefaultStyle","item","rowOutlines","group","count","repaint","columnOutlines","showRowOutline","showColumnOutline","options","ngAfterViewInit","subscribe","ngOnDestroy","spread","getParent","sheetIndex","getSheetIndex","removeSheet","ContentChildren","SpreadSheetsComponent","elRef","style","width","height","workbookInitialized","EventEmitter","validationError","cellClick","cellDoubleClick","enterCell","leaveCell","valueChanged","topRowChanged","leftColumnChanged","invalidOperation","rangeFiltering","rangeFiltered","tableFiltering","tableFiltered","rangeSorting","rangeSorted","clipboardChanging","clipboardChanged","clipboardPasting","clipboardPasted","columnWidthChanging","columnWidthChanged","rowHeightChanging","rowHeightChanged","dragDropBlock","dragDropBlockCompleted","dragFillBlock","dragFillBlockCompleted","editStarting","editChange","editEnding","editEnd","editEnded","rangeGroupStateChanging","rangeGroupStateChanged","selectionChanging","selectionChanged","sheetTabClick","sheetTabDoubleClick","sheetNameChanging","sheetNameChanged","userZooming","userFormulaEntered","cellChanged","columnChanged","rowChanged","activeSheetChanging","activeSheetChanged","sparklineChanged","rangeChanged","buttonClicked","editorStatusChanged","floatingObjectChanged","floatingObjectSelectionChanged","pictureChanged","floatingObjectRemoving","floatingObjectRemoved","pictureSelectionChanged","floatingObjectLoaded","touchToolStripOpening","commentChanged","commentRemoving","commentRemoved","slicerChanged","hostElement","nativeElement","querySelector","Workbook","sheetCount","setSpreadOptions","initSheets","sheets","onSheetsChanged","bindCustomEvent","emit","sheetComponents","sheetComponent","addSheet","clearSheets","event","bind","data","eventType","type","camelCaseEvent","toLowerCase","substr","spreadOptions","option","value","push","destroy","ElementRef","Output","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*import_begin*/\r\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport * as GC from '@grapecity/spread-sheets';\r\n/*import_end*/\r\n\r\n/*code_begin*/\r\n@Component({\r\n  selector: 'gc-column',\r\n  template: `\r\n        <ng-content></ng-content>\r\n    `,\r\n})\r\nexport class ColumnComponent implements OnChanges {\r\n  private changes: any = {};\r\n  private sheet?: GC.Spread.Sheets.Worksheet;\r\n  private index?: number;\r\n\r\n  // indicate all inputs\r\n  @Input() public width?: number;\r\n  @Input() public dataField?: string;\r\n  @Input() public headerText?: string;\r\n  @Input() public visible?: boolean;\r\n  @Input() public resizable?: boolean;\r\n  @Input() public autoFit?: boolean;\r\n  @Input() public style?: GC.Spread.Sheets.Style;\r\n  @Input() public cellType?: GC.Spread.Sheets.CellTypes.Base;\r\n  @Input() public headerStyle?: GC.Spread.Sheets.Style;\r\n  @Input() public formatter: any;\r\n\r\n  public onAttached(sheet: GC.Spread.Sheets.Worksheet, index: number): void {\r\n    this.sheet = sheet;\r\n    this.index = index;\r\n    this.onColumnChanged();\r\n  }\r\n\r\n  private onColumnChanged() {\r\n    if (this.sheet) {\r\n      const sheet = this.sheet;\r\n      sheet.suspendPaint();\r\n      sheet.suspendEvent();\r\n      const changes = this.changes;\r\n      for (const changeName in changes) {\r\n        let newValue = changes[changeName].currentValue;\r\n        if (newValue === null || newValue === void 0) {\r\n          continue;\r\n        }\r\n        switch (changeName) {\r\n          case 'width':\r\n            newValue = parseInt(newValue, 10);\r\n            sheet.setColumnWidth(this.index as number, newValue);\r\n            break;\r\n          case 'visible':\r\n            sheet.setColumnVisible(this.index as number, newValue);\r\n            break;\r\n          case 'resizable':\r\n            sheet.setColumnResizable(this.index as number, newValue);\r\n            break;\r\n          case 'autoFit':\r\n            if (newValue) {\r\n              sheet.autoFitColumn(this.index as number);\r\n            }\r\n            break;\r\n          case 'style':\r\n            sheet.setStyle(-1, this.index as number, newValue);\r\n            break;\r\n          case 'headerStyle':\r\n            sheet.setStyle(-1, this.index as number, newValue, GC.Spread.Sheets.SheetArea.colHeader);\r\n            break;\r\n          case 'cellType':\r\n            sheet.setCellType(-1, this.index as number, newValue);\r\n            break;\r\n          case 'formatter':\r\n            sheet.setFormatter(-1, this.index as number, newValue, GC.Spread.Sheets.SheetArea.viewport);\r\n            break;\r\n        }\r\n      }\r\n      sheet.resumeEvent();\r\n      sheet.resumePaint();\r\n    }\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    this.changes = {};\r\n    const changesCache = this.changes;\r\n    for (const changeName in changes) {\r\n      changesCache[changeName] = changes[changeName];\r\n    }\r\n    this.onColumnChanged();\r\n  }\r\n}\r\n/*code_end*/\r\n","/*import_begin*/\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  ContentChildren,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  QueryList, SimpleChanges,\r\n} from '@angular/core';\r\n/*import_end*/\r\nimport { ColumnComponent } from './column.component';\r\nimport * as GC from '@grapecity/spread-sheets';\r\n/*code_begin*/\r\n@Component({\r\n  selector: 'gc-worksheet',\r\n  template: `\r\n        <ng-content></ng-content>\r\n    `,\r\n})\r\nexport class WorksheetComponent implements OnChanges, AfterViewInit {\r\n  private sheet: GC.Spread.Sheets.Worksheet;\r\n  @ContentChildren(ColumnComponent)\r\n  public columns?: QueryList<ColumnComponent>;\r\n\r\n  // indicate all inputs\r\n  @Input() public rowCount?: number;\r\n  @Input() public colCount?: number;\r\n  @Input() public dataSource: any;\r\n  @Input() public name?: string;\r\n  @Input() public frozenColumnCount?: number;\r\n  @Input() public frozenRowCount?: number;\r\n  @Input() public frozenTrailingRowCount?: number;\r\n  @Input() public frozenTrailingColumnCount?: number;\r\n  @Input() public allowCellOverflow?: boolean;\r\n  @Input() public frozenlineColor?: string;\r\n  @Input() public sheetTabColor?: string;\r\n  @Input() public selectionPolicy?: number;\r\n  @Input() public selectionUnit?: number;\r\n  @Input() public zoom?: number;\r\n  @Input() public currentTheme?: string;\r\n  @Input() public clipBoardOptions?: number;\r\n  @Input() public rowHeaderVisible?: boolean;\r\n  @Input() public colHeaderVisible?: boolean;\r\n  @Input() public rowHeaderAutoText?: number;\r\n  @Input() public colHeaderAutoText?: number;\r\n  @Input() public rowHeaderAutoTextIndex?: number;\r\n  @Input() public colHeaderAutoTextIndex?: number;\r\n  @Input() public isProtected?: boolean;\r\n  @Input() public showRowOutline?: boolean;\r\n  @Input() public showColumnOutline?: boolean;\r\n  @Input() public selectionBackColor?: string;\r\n  @Input() public selectionBorderColor?: string;\r\n  @Input() public defaultStyle?: GC.Spread.Sheets.Style;\r\n  @Input() public rowOutlineInfo?: any[];\r\n  @Input() public columnOutlineInfo?: any[];\r\n  @Input() public autoGenerateColumns?: boolean;\r\n\r\n  constructor() {\r\n    this.sheet = new GC.Spread.Sheets.Worksheet('');\r\n  }\r\n\r\n  public onAttached(): void {\r\n    const sheet = this.sheet;\r\n    const columns = (this.columns as QueryList<ColumnComponent>);\r\n    sheet.suspendPaint();\r\n    sheet.suspendEvent();\r\n    if (this.dataSource) {\r\n      sheet.setDataSource(this.dataSource);\r\n      columns.forEach((columnComponent: ColumnComponent, index: number) => {\r\n        if (columnComponent.dataField) {\r\n          sheet.bindColumn(index, {\r\n            name: columnComponent.dataField,\r\n            displayName: columnComponent.headerText,\r\n          });\r\n        }\r\n      });\r\n    }\r\n    if (columns.length > 0) {\r\n      sheet.setColumnCount(columns.length);\r\n      columns.forEach((columnComponent: ColumnComponent, index: number) => {\r\n        columnComponent.onAttached(this.sheet, index);\r\n      });\r\n    }\r\n    sheet.resumeEvent();\r\n    sheet.resumePaint();\r\n  }\r\n  public getSheet() {\r\n    return this.sheet;\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    const sheet = this.sheet;\r\n    sheet.suspendPaint();\r\n    sheet.suspendEvent();\r\n    for (const changeName in changes) {\r\n      const newValue = changes[changeName].currentValue;\r\n      if (newValue === null || newValue === void 0) {\r\n        continue;\r\n      }\r\n      switch (changeName) {\r\n        case 'rowCount':\r\n          sheet.setRowCount(newValue);\r\n          break;\r\n        case 'colCount':\r\n          sheet.setColumnCount(newValue);\r\n          break;\r\n        case 'name':\r\n          sheet.name(newValue);\r\n          break;\r\n        case 'frozenColumnCount':\r\n          sheet.frozenColumnCount(newValue);\r\n          break;\r\n        case 'frozenRowCount':\r\n          sheet.frozenRowCount(newValue);\r\n          break;\r\n        case 'frozenTrailingRowCount':\r\n          sheet.frozenTrailingRowCount(newValue);\r\n          break;\r\n        case 'frozenTrailingColumnCount':\r\n          sheet.frozenTrailingColumnCount(newValue);\r\n          break;\r\n        case 'selectionPolicy':\r\n          sheet.selectionPolicy(newValue);\r\n          break;\r\n        case 'selectionUnit':\r\n          sheet.selectionUnit(newValue);\r\n          break;\r\n        case 'zoom':\r\n          sheet.zoom(newValue);\r\n          break;\r\n        case 'currentTheme':\r\n          sheet.currentTheme(newValue);\r\n          break;\r\n        case 'defaultStyle':\r\n          sheet.setDefaultStyle(newValue);\r\n          break;\r\n        case 'rowOutlineInfo':\r\n          newValue.forEach((item: any) => {\r\n            sheet.rowOutlines.group(item.index, item.count);\r\n          });\r\n          sheet.repaint();\r\n          break;\r\n        case 'columnOutlineInfo':\r\n          newValue.forEach((item: any) => {\r\n            sheet.columnOutlines.group(item.index, item.count);\r\n          });\r\n          sheet.repaint();\r\n          break;\r\n        case 'showRowOutline':\r\n          sheet.showRowOutline(newValue);\r\n          break;\r\n        case 'showColumnOutline':\r\n          sheet.showColumnOutline(newValue);\r\n          break;\r\n        case 'dataSource':\r\n          sheet.setDataSource(newValue);\r\n          break;\r\n        case 'autoGenerateColumns':\r\n          sheet[changeName] = newValue;\r\n        default:\r\n          (sheet.options as any)[changeName] = newValue;\r\n      }\r\n    }\r\n    sheet.resumeEvent();\r\n    sheet.resumePaint();\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    (this.columns as QueryList<ColumnComponent>).changes.subscribe(() => { this.onAttached(); });\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    const sheet = this.sheet;\r\n    const spread = sheet ? sheet.getParent() : null;\r\n    if (spread) {\r\n      const sheetIndex = spread.getSheetIndex(sheet.name());\r\n      if (sheetIndex !== void 0) {\r\n        spread.removeSheet(sheetIndex);\r\n      }\r\n    }\r\n  }\r\n}\r\n/*code_end*/\r\n","/*import_begin*/\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList, SimpleChanges,\r\n} from '@angular/core';\r\n/*import_end*/\r\n\r\nimport { WorksheetComponent } from './worksheet.component';\r\nimport * as GC from '@grapecity/spread-sheets';\r\n/*code_begin*/\r\n@Component({\r\n  selector: 'gc-spread-sheets',\r\n  template: `\r\n        <div [ngStyle]=\"style\" [ngClass]=\"hostClass\">\r\n            <ng-content></ng-content>\r\n        </div>\r\n    `,\r\n})\r\nexport class SpreadSheetsComponent implements OnChanges, AfterViewInit, OnDestroy {\r\n  private spread?: GC.Spread.Sheets.Workbook;\r\n  private spreadOptions?: any[];\r\n\r\n  public style = {\r\n    width: '800px',\r\n    height: '600px',\r\n  };\r\n\r\n  // indicate all options\r\n  @Input() public allowUserResize?: boolean;\r\n  @Input() public allowUserZoom?: boolean;\r\n  @Input() public allowUserEditFormula?: boolean;\r\n  @Input() public allowUserDragFill?: boolean;\r\n  @Input() public allowUserDragDrop?: boolean;\r\n  @Input() public allowUserDragMerge?: boolean;\r\n  @Input() public allowUndo?: boolean;\r\n  @Input() public allowSheetReorder?: boolean;\r\n  @Input() public allowContextMenu?: boolean;\r\n  @Input() public allowUserDeselect?: boolean;\r\n  @Input() public allowCopyPasteExcelStyle?: boolean;\r\n  @Input() public allowExtendPasteRange?: boolean;\r\n  @Input() public cutCopyIndicatorVisible?: boolean;\r\n  @Input() public cutCopyIndicatorBorderColor?: string;\r\n  @Input() public copyPasteHeaderOptions?: number;\r\n  @Input() public defaultDragFillType?: number;\r\n  @Input() public enableFormulaTextbox?: boolean;\r\n  @Input() public highlightInvalidData?: boolean;\r\n  @Input() public newTabVisible?: boolean;\r\n  @Input() public tabStripVisible?: boolean;\r\n  @Input() public tabEditable?: boolean;\r\n  @Input() public tabStripRatio?: number;\r\n  @Input() public tabNavigationVisible?: boolean;\r\n  @Input() public autoFitType?: number;\r\n  @Input() public referenceStyle?: number;\r\n  @Input() public backColor?: string;\r\n  @Input() public grayAreaBackColor?: string;\r\n  @Input() public resizeZeroIndicator?: number;\r\n  @Input() public showVerticalScrollbar?: boolean;\r\n  @Input() public showHorizontalScrollbar?: boolean;\r\n  @Input() public scrollbarMaxAlign?: boolean;\r\n  @Input() public scrollIgnoreHidden?: boolean;\r\n  @Input() public hostStyle?: any; // used for get styles form parent host DIV\r\n  @Input() public hostClass?: string;\r\n  @Input() public hideSelection?: boolean;\r\n  @Input() public name?: string;\r\n  @Input() public backgroundImage?: string;\r\n  @Input() public backgroundImageLayout?: number;\r\n  @Input() public showScrollTip?: number;\r\n  @Input() public showResizeTip?: number;\r\n  @Input() public showDragDropTip?: boolean;\r\n  @Input() public showDragFillTip?: boolean;\r\n  @Input() public showDragFillSmartTag?: boolean;\r\n  @Input() public scrollbarShowMax?: boolean;\r\n  @Input() public useTouchLayout?: boolean;\r\n\r\n  // outputs events\r\n  @Output() public workbookInitialized = new EventEmitter<any>();\r\n  @Output() public validationError = new EventEmitter<any>();\r\n  @Output() public cellClick = new EventEmitter<any>();\r\n  @Output() public cellDoubleClick = new EventEmitter<any>();\r\n  @Output() public enterCell = new EventEmitter<any>();\r\n  @Output() public leaveCell = new EventEmitter<any>();\r\n  @Output() public valueChanged = new EventEmitter<any>();\r\n  @Output() public topRowChanged = new EventEmitter<any>();\r\n  @Output() public leftColumnChanged = new EventEmitter<any>();\r\n  @Output() public invalidOperation = new EventEmitter<any>();\r\n  @Output() public rangeFiltering = new EventEmitter<any>();\r\n  @Output() public rangeFiltered = new EventEmitter<any>();\r\n  @Output() public tableFiltering = new EventEmitter<any>();\r\n  @Output() public tableFiltered = new EventEmitter<any>();\r\n  @Output() public rangeSorting = new EventEmitter<any>();\r\n  @Output() public rangeSorted = new EventEmitter<any>();\r\n  @Output() public clipboardChanging = new EventEmitter<any>();\r\n  @Output() public clipboardChanged = new EventEmitter<any>();\r\n  @Output() public clipboardPasting = new EventEmitter<any>();\r\n  @Output() public clipboardPasted = new EventEmitter<any>();\r\n  @Output() public columnWidthChanging = new EventEmitter<any>();\r\n  @Output() public columnWidthChanged = new EventEmitter<any>();\r\n  @Output() public rowHeightChanging = new EventEmitter<any>();\r\n  @Output() public rowHeightChanged = new EventEmitter<any>();\r\n  @Output() public dragDropBlock = new EventEmitter<any>();\r\n  @Output() public dragDropBlockCompleted = new EventEmitter<any>();\r\n  @Output() public dragFillBlock = new EventEmitter<any>();\r\n  @Output() public dragFillBlockCompleted = new EventEmitter<any>();\r\n  @Output() public editStarting = new EventEmitter<any>();\r\n  @Output() public editChange = new EventEmitter<any>();\r\n  @Output() public editEnding = new EventEmitter<any>();\r\n  @Output() public editEnd = new EventEmitter<any>();\r\n  @Output() public editEnded = new EventEmitter<any>();\r\n  @Output() public rangeGroupStateChanging = new EventEmitter<any>();\r\n  @Output() public rangeGroupStateChanged = new EventEmitter<any>();\r\n  @Output() public selectionChanging = new EventEmitter<any>();\r\n  @Output() public selectionChanged = new EventEmitter<any>();\r\n  @Output() public sheetTabClick = new EventEmitter<any>();\r\n  @Output() public sheetTabDoubleClick = new EventEmitter<any>();\r\n  @Output() public sheetNameChanging = new EventEmitter<any>();\r\n  @Output() public sheetNameChanged = new EventEmitter<any>();\r\n  @Output() public userZooming = new EventEmitter<any>();\r\n  @Output() public userFormulaEntered = new EventEmitter<any>();\r\n  @Output() public cellChanged = new EventEmitter<any>();\r\n  @Output() public columnChanged = new EventEmitter<any>();\r\n  @Output() public rowChanged = new EventEmitter<any>();\r\n  @Output() public activeSheetChanging = new EventEmitter<any>();\r\n  @Output() public activeSheetChanged = new EventEmitter<any>();\r\n  @Output() public sparklineChanged = new EventEmitter<any>();\r\n  @Output() public rangeChanged = new EventEmitter<any>();\r\n  @Output() public buttonClicked = new EventEmitter<any>();\r\n  @Output() public editorStatusChanged = new EventEmitter<any>();\r\n  @Output() public floatingObjectChanged = new EventEmitter<any>();\r\n  @Output() public floatingObjectSelectionChanged = new EventEmitter<any>();\r\n  @Output() public pictureChanged = new EventEmitter<any>();\r\n  @Output() public floatingObjectRemoving = new EventEmitter<any>();\r\n  @Output() public floatingObjectRemoved = new EventEmitter<any>();\r\n  @Output() public pictureSelectionChanged = new EventEmitter<any>();\r\n  @Output() public floatingObjectLoaded = new EventEmitter<any>();\r\n  @Output() public touchToolStripOpening = new EventEmitter<any>();\r\n  @Output() public commentChanged = new EventEmitter<any>();\r\n  @Output() public commentRemoving = new EventEmitter<any>();\r\n  @Output() public commentRemoved = new EventEmitter<any>();\r\n  @Output() public slicerChanged = new EventEmitter<any>();\r\n\r\n  @ContentChildren(WorksheetComponent)\r\n  public sheets?: QueryList<WorksheetComponent>;\r\n\r\n  constructor(private elRef: ElementRef) {\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    const elRef = this.elRef;\r\n    const dom = elRef.nativeElement as HTMLElement;\r\n    const hostElement = dom.querySelector('div');\r\n    this.spread = new GC.Spread.Sheets.Workbook(hostElement, { sheetCount: 0 });\r\n    this.setSpreadOptions();\r\n    this.initSheets();\r\n    (this.sheets as QueryList<WorksheetComponent>).changes.subscribe((changes) => {\r\n      this.onSheetsChanged(changes);\r\n    }); // may change sheets using bingidng.\r\n    this.bindCustomEvent(this.spread);\r\n    this.workbookInitialized.emit({ spread: this.spread });\r\n  }\r\n\r\n  private onSheetsChanged(sheetComponents: QueryList<WorksheetComponent>) {\r\n    const spread = (this.spread as GC.Spread.Sheets.Workbook);\r\n    spread.suspendPaint();\r\n    if (sheetComponents) {\r\n      sheetComponents.forEach((sheetComponent: WorksheetComponent, index: number) => {\r\n        const sheet = sheetComponent.getSheet();\r\n        if (sheet && !sheet.getParent()) {\r\n          spread.addSheet(index, sheetComponent.getSheet());\r\n          sheetComponent.onAttached();\r\n        }\r\n      });\r\n    }\r\n    spread.resumePaint();\r\n  }\r\n\r\n  private initSheets() {\r\n    const sheets = this.sheets as QueryList<WorksheetComponent>;\r\n    const spread = this.spread as GC.Spread.Sheets.Workbook;\r\n    spread.clearSheets();\r\n    sheets.forEach((sheetComponent, index) => {\r\n      spread.addSheet(index, sheetComponent.getSheet());\r\n      sheetComponent.onAttached();\r\n    });\r\n    // when there is no sheet, add default sheet to spread\r\n    if (sheets.length === 0) {\r\n      spread.addSheet(0, new GC.Spread.Sheets.Worksheet(''));\r\n    }\r\n  }\r\n\r\n  private bindCustomEvent(spread: GC.Spread.Sheets.Workbook) {\r\n    const customEventNameSpace = '.ng';\r\n    const events = ['ValidationError', 'CellClick', 'CellDoubleClick', 'EnterCell',\r\n      'LeaveCell', 'ValueChanged', 'TopRowChanged', 'LeftColumnChanged',\r\n      'InvalidOperation', 'RangeFiltering', 'RangeFiltered', 'TableFiltering',\r\n      'TableFiltered', 'RangeSorting', 'RangeSorted', 'ClipboardChanging',\r\n      'ClipboardChanged', 'ClipboardPasting', 'ClipboardPasted', 'ColumnWidthChanging',\r\n      'ColumnWidthChanged', 'RowHeightChanging', 'RowHeightChanged', 'DragDropBlock',\r\n      'DragDropBlockCompleted', 'DragFillBlock', 'DragFillBlockCompleted', 'EditStarting',\r\n      'EditChange', 'EditEnding', 'EditEnd', 'EditEnded', 'RangeGroupStateChanging',\r\n      'RangeGroupStateChanged', 'SelectionChanging', 'SelectionChanged', 'SheetTabClick',\r\n      'SheetTabDoubleClick', 'SheetNameChanging', 'SheetNameChanged',\r\n      'UserZooming', 'UserFormulaEntered', 'CellChanged', 'ColumnChanged',\r\n      'RowChanged', 'ActiveSheetChanging', 'ActiveSheetChanged',\r\n      'SparklineChanged',\r\n      'RangeChanged', 'ButtonClicked', 'EditorStatusChanged',\r\n      'FloatingObjectChanged', 'FloatingObjectSelectionChanged', 'PictureChanged',\r\n      'FloatingObjectRemoving', 'FloatingObjectRemoved', 'PictureSelectionChanged',\r\n      'FloatingObjectLoaded', 'TouchToolStripOpening', 'CommentChanged', 'CommentRemoving', 'CommentRemoved', 'SlicerChanged'];\r\n    events.forEach((event) => {\r\n      spread.bind(event + customEventNameSpace, (event: any, data: any) => {\r\n        const eventType = event.type;\r\n        const camelCaseEvent = eventType[0].toLowerCase() + eventType.substr(1);\r\n        (this as any)[camelCaseEvent].emit(data);\r\n      });\r\n    });\r\n  }\r\n\r\n  public setSpreadOptions() {\r\n    const spread = this.spread as GC.Spread.Sheets.Workbook;\r\n    if (!this.spread) {\r\n      return;\r\n    }\r\n    spread.suspendEvent();\r\n    spread.suspendPaint();\r\n    const options = this.spreadOptions;\r\n    options && options.forEach((option) => {\r\n      if (option.name === 'name') {\r\n        spread.name = option.value;\r\n      } else {\r\n        (spread.options as any)[option.name] = option.value;\r\n      }\r\n    });\r\n    spread.resumePaint();\r\n    spread.resumeEvent();\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    const options = [];\r\n    for (const changeName in changes) {\r\n      const newValue = changes[changeName].currentValue;\r\n      if (newValue !== null && newValue !== void 0) {\r\n        switch (changeName) {\r\n          case 'hostStyle':\r\n            this.style = newValue;\r\n            break;\r\n          case 'hostClass':\r\n            break;\r\n          default:\r\n            options.push({ name: changeName, value: newValue });\r\n        }\r\n      }\r\n    }\r\n    this.spreadOptions = options;\r\n    this.setSpreadOptions();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    (this.spread as GC.Spread.Sheets.Workbook).destroy();\r\n  }\r\n}\r\n/*code_end*/\r\n","/*import_begin*/\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ColumnComponent } from './column.component';\r\n/*import_end*/\r\nimport { SpreadSheetsComponent } from './spreadSheets.component';\r\nimport { WorksheetComponent } from './worksheet.component';\r\n\r\n/*code_begin*/\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [SpreadSheetsComponent, WorksheetComponent, ColumnComponent],\r\n  exports: [SpreadSheetsComponent, WorksheetComponent, ColumnComponent],\r\n})\r\nexport class SpreadSheetsModule {\r\n}\r\n/*code_end*/\r\n"]}